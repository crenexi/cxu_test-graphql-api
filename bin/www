#!/usr/bin/env node
'use strict';

const app = require('../dist/app');
const debug = require('debug')('express:server');
const http = require('http');
const log = require('fancy-log');
const chalk = require('chalk');

// Set ports
const port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

// HTTP server
const server = http.createServer(app);

// Listen and handle
server.listen(port);
server.on('listening', onListening);
server.on('error', onError);

/** Normalize port */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) { return val; } // named pipe
  if (port >= 0) { return port; } // port number

  return false;
}

/** Listen to server */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  let msgStr = `Magic now at ${bind}`;
  log(chalk.blue.bold(msgStr));
}

/** Server error */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      let privilegesMsg = `${bind} requires elevated privileges!`;
      log(chalk.red.bold(privilegesMsg));
      process.exit(1);
      break;
    case 'EADDRINUSE':
      const inUseMessage = `${bind} is already in use!`;
      log(chalk.red.bold(inUseMessage));
      process.exit(1);
      break;
    default:
      throw error;
  }
}
